class Graph{constructor(){this.numberOfNodes=0,this.adjacentList={}}addVertex(t){this.adjacentList[t]=[],this.numberOfNodes++}addEdge(t,s){this.adjacentList[t].push(s),this.adjacentList[s].push(t)}showConnections(){var e;for(e of Object.keys(this.adjacentList)){let t="",s;for(s of this.adjacentList[e])t+=s+" ";console.log(e+"--\x3e"+t)}}}Object.freeze(Graph);
class LinkedListNode{constructor(e){this.value=e,this.next=null,this.prev=null}}class LinkedList{constructor(e){this.head={value:e,next:null,prev:null},this.tail=this.head,this.length=1}append(e){e=new LinkedListNode(e);e.prev=this.tail,this.tail.next=e,this.tail=e,this.length++}prepend(e){e=new LinkedListNode(e);e.next=this.head,this.head.prev=e,this.head=e,this.length++}insert(e,t){if(e>=this.length)return this.append(t);var t=new LinkedListNode(t),e=this._traverseToIndex(e-1),i=e.next;(e.next=t).prev=e,(t.next=i).prev=t,this.length++}remove(n){if(n<0||n>=this.size)return"Please Enter a valid index";{let e=0,t=this.head,i=t;if(0===n)this.head=t.next;else{for(;e<n;)e++,t=(i=t).next;i.next=t.next}return this.size--,t.element}}_traverseToIndex(e){let t=0,i=this.head;for(;t!==e;)i=i.next,t++;return i}reverse(){if(this.head.next){let e=this.head,t=(this.tail=this.head,e.next);for(;t;){var i=t.next;t.prev=null,t.next=null,(e.prev=t).next=e,e=t,t=i}this.head.next=null,this.tail.next=null,this.head=e}}printList(){var e=[];let t=this.head;for(;null!==t;)e.push(t.value),t=t.next;console.log(e)}}Object.freeze(LinkedList);
class List{constructor(){this.length=0,this.list={}}get(t){return this.list[t]}push(t){return this.list[this.length]=t,this.length++,this.list}pop(){return delete this.list[this.length-1],this.length--,this.list}pull(t){for(let t=this.length;0<t;t--)this.list[t]=this.list[t-1];this.list[0]=t,this.length++}shift(){for(let t=0;t<this.length-1;t++)this.list[t]=this.list[t+1];delete this.list[this.length-1],this.length--}set(s,t){if("number"!=typeof s)return"invalid index";for(let t=this.length;t>=s;t--)this.list[t]=this.list[t-1];return this.list[s]=t,this.length++,this.list}remove(s){for(let t=s;t<this.length-1;t++)this.list[t]=this.list[t+1];delete this.list[this.length-1],this.length--}slice(s,i){if(i<s)return"start must be smaller than end";var h={};for(let t=s;t<=i;t++)h[t-s]=this.list[t];return h}}Object.freeze(List);
class QueueNode{constructor(t){this.value=t,this.next=null}}class Queue{constructor(){this.first=null,this.last=null,this.length=0}peek(){return this.first}enqueue(t){t=new QueueNode(t);this.last?(this.last.next=t,this.last=t):(this.last=t,this.first=t),this.length++}dequeue(){this.first&&(1===this.length&&(this.last=null),this.first=this.first.next,this.length--)}printList(){var t=[];let s=this.first;for(;null!==s;)t.push(s.value),s=s.next;console.log(t,this.length)}}Object.freeze(Queue);
class StackNode{constructor(t){this.value=t,this.next=null,this.prev=null}}class Stack{constructor(){this.top=null,this.bottom=null,this.length=0}peek(){return this.top}push(t){var o,t=new StackNode(t);this.bottom?(o=this.top,this.top.next=t,this.top=this.top.next,this.top.prev=o):(this.bottom=t,this.top=this.bottom),this.length++}pop(){null!==this.bottom&&(this.top.prev?(this.top=this.top.prev,this.top.next=null):(this.bottom=null,this.top=null),this.length--)}printList(){var t=[];let o=this.bottom;for(;null!==o;)t.push(o.value),o=o.next;console.log(t,this.length)}}Object.freeze(Stack);
class TreeNode{constructor(e){this.left=null,this.right=null,this.value=e}}class Tree{constructor(){this.root=null}insert(t){var r=new TreeNode(t);if(this.root){let e=this.root;for(;;)if(t<e.value){if(!e.left){e.left=r;break}e=e.left}else{if(!e.right){e.right=r;break}e=e.right}}else this.root=r}lookup(t){if(this.root){let e=this.root;for(;e;)if(e.value>t)e=e.left;else if(e.value<t)e=e.right;else if(e.value===t)return e}return!1}remove(e){if(!this.root)return!1;let r=this.root,i=null;for(;r;)if(e<r.value)r=(i=r).left;else if(e>r.value)r=(i=r).right;else if(r.value===e){if(null===r.right)null===i?this.root=r.left:r.value<i.value?i.left=r.left:r.value>i.value&&(i.right=r.left);else if(null===r.right.left)r.right.left=r.left,null===i?this.root=r.right:r.value<i.value?i.left=r.right:r.value>i.value&&(i.right=r.right);else{let e=r.right.left,t=r.right;for(;null!==e.left;)e=(t=e).left;t.left=e.right,e.left=r.left,e.right=r.right,null===i?this.root=e:r.value<i.value?i.left=e:r.value>i.value&&(i.right=e)}return!0}}_BFS(){var e=this.root,t=[],r=[];for(r.push(e);0<r.length;)e=r.shift(),t.push(e.value),e.left&&r.push(e.left),e.right&&r.push(e.right);return t}_BFSR(){return this._RecursiveBFS([this.root],[],"BFSR")}_RecursiveBFS(e,t){var r;return e.length?(r=e.shift(),t.push(r.value),r.left&&e.push(r.left),r.right&&e.push(r.right),this._RecursiveBFS(e,t)):t}_DFSInOrder(){return this._RecursiveDFSIn(this.root,[])}_DFSPostOrder(){return this._RecursiveDFSPost(this.root,[])}_DFSPreOrder(){return this._RecursiveDFSPre(this.root,[])}_Traverse(e,t,r,i){switch(r){case"BFSR":var l;return e.length?(l=e.shift(),t.push(l.value),l.left&&e.push(l.left),l.right&&e.push(l.right),this._Traverse(e,t,r)):t;case"DFSR":return"preOrder"===i&&t.push(e.value),e.left&&this._Traverse(e.left,t,r,i),"inOrder"===i&&t.push(e.value),e.right&&this._Traverse(e.right,t,r,i),"postOrder"===i&&t.push(e.value),t}}_RecursiveDFSPre(e,t){return t.push(e.value),e.left&&this._RecursiveDFSPre(e.left,t),e.right&&this._RecursiveDFSPre(e.right,t),t}_RecursiveDFSPost(e,t){return e.left&&this._RecursiveDFSPost(e.left,t),e.right&&this._RecursiveDFSPost(e.right,t),t.push(e.value),t}_RecursiveDFSIn(e,t){return e.left&&this._RecursiveDFSIn(e.left,t),t.push(e.value),e.right&&this._RecursiveDFSIn(e.right,t),t}}Object.freeze(Tree);